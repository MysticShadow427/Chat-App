chat app banayenge follow the course
src folder for all node js scripts
port and public directory path ko confihure karna hai 
path is a core node module, __dirname means current folder
we ned to serve up the our folder to express middleware hence app.use express.static
 we will modify package .json with making a "start"script  to bootstart the app using node  
 to agar apn ne npm run start ye likha to server start ho jaayega nice
 and also dev dependcncies for nodemon make a dev script 
 dev dependcncies vo rahte jo hame bas apnea app locally run karne ke liye lagte 
 and for this to run npm run dev command in terminal 
 *web socket protocol-
 web sockets allow full duplex communication means a bidrectional communication wheerein a server or a client both can initiate communication 
 and with web socket ek baar client connect ho gaya to it stays forever until it wants and the server sends data got from another client to another client instantly
 we will use socket.io to make socket servers and also client side code to communicte with this server 
 now this server is different from regular hence we ned to modify the express server accordingly with socket.io 
 we will make a http server and pass it to our express app and instead of "app" we will use "server" hecen server.listen() and now we make a socketio ka instance and pass our http server to this 
 io.on() jab koi event hoga to ye crow and it has 2 arg name of event and fucntion to run after that event happens and 'connection' is an event but we will not get anything unless we connect to our server hence we need to make client side code also and we will take this from the file served by socket.io server as it serves a file for clients when we initialoze it and we will include it in our index.html public folder ki and the file name is socket.io.js and hence to write this c
 lient side code we will make folder in public to store our js files 
 we call io() in chat.js to access the server in it 
 now we will learn by example about socket.io ke evenrts -
 the server will store a number called count and it will share that with all the clients,the client will have button to increment and again share it to cleints
 on.connection ke arg ke func ka arg ek socket rehata and it has functions and info about the conection,ek io.connection() runs utne number of time jitne number of clients connect hue and to send that data to newly connected client we use socket.emit() 1st arg us name of event 
now on client side io() jo client ko access dilata hai usko var me store karenge hence const socket=io() and here in client side we have
socket.on() 2 args and 1st is event and the name should be same and 2nd is calback function  , jo bhi server se bhej rahe hai emit() me vo saafre client side me as a callback function ke arg me mil jaate and gen naam same rakho ,abhi index.html me ek button bana do and aisa karo ki button clicke pe count +1 ho jaaye and vo server ko bhejnge ye js ka code chat.js means cleint side 
to send from client also we use socket.emit() when button is clicked and ye server side js code me isko apan socket.on() se listen karenge and usme count++ karke socket.emit kar denge same last vala event jo server ne bheja tha ...but this whole code is only for a single connection eg-
ek client connec hua and button click krke coutn change kiya to jo naya count  hoga vo new connectred client ko dikhega but abhi agar pahele client ne button click karke coubt badhaya to vo bas usi user ko dikhega jisne button click kiya hence aisa na hone ke liye we do io.emit() rather than seocket.emit() n3-17-05 ka code dekho iske liye 
ham m=form se input bhejnege usse event bhejkar message bhejneg server ko and we stop its default behaviour so after refresh???
const message=e.target.elements.message this causes to crash ;less e is what we get from our query selector and .message is the name property of that element  